(()=>{"use strict";class e{constructor(e){this.currentNoteIndex=0,this.notePool=[],this.config=e,this.notes=[...e.notes],this.initializeNotePool()}getCurrentNote(){return this.notePool[this.currentNoteIndex]}getAvailableNotes(){return this.notes}nextNote(){this.currentNoteIndex=(this.currentNoteIndex+1)%this.notePool.length}isComplete(e,t=10,s=5){if(e.length<t)return!1;const i=e.slice(-t),n=i.every((e=>e.isCorrect)),a=i.reduce(((e,t)=>e+t.timeSpent),0)/i.length;return n&&a<s}initializeNotePool(){this.notePool=[...this.notes]}updateNotePool(e){this.notePool=[...this.notes];for(const t of this.notes){const s=e[t.name];if(s&&s.incorrect>0){const e=Math.min(5,Math.ceil(s.incorrect/Math.max(1,s.correct)));for(let s=0;s<e;s++)this.notePool.push(t)}}this.shuffleNotePool()}shuffleNotePool(){for(let e=this.notePool.length-1;e>0;e--){const t=Math.floor(Math.random()*(e+1));[this.notePool[e],this.notePool[t]]=[this.notePool[t],this.notePool[e]]}}}const t=[{name:"F",position:1,isSpace:!0,clef:"treble"},{name:"A",position:2,isSpace:!0,clef:"treble"},{name:"C",position:3,isSpace:!0,clef:"treble"},{name:"E",position:4,isSpace:!0,clef:"treble"},{name:"E",position:1,isSpace:!1,clef:"treble"},{name:"G",position:2,isSpace:!1,clef:"treble"},{name:"B",position:3,isSpace:!1,clef:"treble"},{name:"D",position:4,isSpace:!1,clef:"treble"},{name:"F",position:5,isSpace:!1,clef:"treble"}],s=[{name:"A",position:1,isSpace:!0,clef:"bass"},{name:"C",position:2,isSpace:!0,clef:"bass"},{name:"E",position:3,isSpace:!0,clef:"bass"},{name:"G",position:4,isSpace:!0,clef:"bass"},{name:"G",position:1,isSpace:!1,clef:"bass"},{name:"B",position:2,isSpace:!1,clef:"bass"},{name:"D",position:3,isSpace:!1,clef:"bass"},{name:"F",position:4,isSpace:!1,clef:"bass"},{name:"A",position:5,isSpace:!1,clef:"bass"}];class i{}i.levels=[{id:1,name:"Treble Clef Spaces",description:"Learn the notes in the spaces of the treble clef (F, A, C, E)",clef:"treble",notes:t.filter((e=>e.isSpace&&"treble"===e.clef)),requiredSuccessCount:8,maxTimePerProblem:6},{id:2,name:"Treble Clef Lines",description:"Learn the notes on the lines of the treble clef (E, G, B, D, F)",clef:"treble",notes:t.filter((e=>!e.isSpace&&"treble"===e.clef)),requiredSuccessCount:10,maxTimePerProblem:5},{id:3,name:"All Treble Clef Notes",description:"Practice all notes on the treble clef",clef:"treble",notes:t.filter((e=>"treble"===e.clef)),requiredSuccessCount:12,maxTimePerProblem:4},{id:4,name:"Bass Clef Spaces",description:"Learn the notes in the spaces of the bass clef (A, C, E, G)",clef:"bass",notes:s.filter((e=>e.isSpace&&"bass"===e.clef)),requiredSuccessCount:8,maxTimePerProblem:6},{id:5,name:"Bass Clef Lines",description:"Learn the notes on the lines of the bass clef (G, B, D, F, A)",clef:"bass",notes:s.filter((e=>!e.isSpace&&"bass"===e.clef)),requiredSuccessCount:10,maxTimePerProblem:5},{id:6,name:"All Bass Clef Notes",description:"Practice all notes on the bass clef",clef:"bass",notes:s.filter((e=>"bass"===e.clef)),requiredSuccessCount:12,maxTimePerProblem:4},{id:7,name:"Master Level",description:"Practice all notes on both the treble and bass clefs",clef:"treble",notes:[...t,...s],requiredSuccessCount:15,maxTimePerProblem:3}];class n{constructor(e){this.width=500,this.height=200,this.lineSpacing=10,this.staffY=100;const t=document.getElementById(e);if(!t)throw new Error(`Container element with id '${e}' not found`);this.container=t,this.canvas=document.createElement("canvas"),this.canvas.width=this.width,this.canvas.height=this.height;const s=this.canvas.getContext("2d");if(!s)throw new Error("Failed to get canvas context");this.ctx=s,this.container.appendChild(this.canvas),this.drawStaff()}renderNote(e){this.clear(),this.drawStaff(),this.drawClef(e.clef),this.drawNote(e)}clear(){this.ctx.clearRect(0,0,this.width,this.height)}drawStaff(){this.ctx.strokeStyle="black",this.ctx.lineWidth=1;for(let e=0;e<5;e++){const t=this.staffY+(e-2)*this.lineSpacing*2;this.ctx.beginPath(),this.ctx.moveTo(50,t),this.ctx.lineTo(this.width-50,t),this.ctx.stroke()}}drawClef(e){const t=new Image;t.onload=()=>{"treble"===e?this.ctx.drawImage(t,60,this.staffY-40,30,80):this.ctx.drawImage(t,60,this.staffY-30,30,60)},t.src="imgs/treble_clef.png"}drawNote(e){let t;e.clef,t=e.isSpace?this.staffY+(2-e.position)*this.lineSpacing*2+this.lineSpacing:this.staffY+(2-e.position+1)*this.lineSpacing*2;const s=this.width/2;if(this.ctx.fillStyle="black",this.ctx.beginPath(),this.ctx.ellipse(s,t,7,5,Math.PI/4,0,2*Math.PI),this.ctx.fill(),this.ctx.beginPath(),this.ctx.moveTo(s+6,t),this.ctx.lineTo(s+6,t-30),this.ctx.stroke(),e.accidental){this.ctx.fillStyle="black",this.ctx.font="20px Arial";let i="";switch(e.accidental){case"sharp":i="♯";break;case"flat":i="♭";break;case"natural":i="♮"}this.ctx.fillText(i,s-20,t+5)}}}class a{constructor(e){this.storageKey=e}saveState(e){try{const t=JSON.stringify(e);localStorage.setItem(this.storageKey,t)}catch(e){console.error("Failed to save game state:",e)}}loadState(){try{const e=localStorage.getItem(this.storageKey);return null===e?null:JSON.parse(e)}catch(e){return console.error("Failed to load game state:",e),null}}clearState(){try{localStorage.removeItem(this.storageKey)}catch(e){console.error("Failed to clear game state:",e)}}}class r{constructor(){this.currentLevel=null,this.state={currentLevelIndex:0,isGameRunning:!1,noteHistory:{},recentAttempts:[]},this.sheetRenderer=new n("sheet-music"),this.storageManager=new a("music-reading-game"),this.noteOptionsContainer=document.getElementById("note-options"),this.feedbackElement=document.getElementById("feedback"),this.streakElement=document.getElementById("streak-value"),this.speedElement=document.getElementById("speed-value"),this.streakRequiredElement=document.getElementById("streak-required"),this.speedRequiredElement=document.getElementById("speed-required");const e=this.storageManager.loadState();e&&(this.state=e,this.state.recentAttempts||(this.state.recentAttempts=[])),this.updateStats()}start(){this.state.isGameRunning||(this.state.isGameRunning=!0,this.loadLevel(this.state.currentLevelIndex))}reset(){this.state={currentLevelIndex:0,isGameRunning:!1,noteHistory:{},recentAttempts:[]},this.updateStats(),this.clearFeedback(),this.clearNoteOptions(),this.sheetRenderer.clear(),this.storageManager.saveState(this.state)}loadLevel(t){const s=i.levels[t];s?(this.currentLevel=new e(s),this.displayCurrentNote()):console.error(`Level ${t} does not exist.`)}displayCurrentNote(){if(!this.currentLevel)return;const e=this.currentLevel.getCurrentNote();this.sheetRenderer.renderNote(e),this.renderNoteOptions()}renderNoteOptions(){this.clearNoteOptions(),this.currentLevel&&this.currentLevel.getAvailableNotes().forEach((e=>{const t=document.createElement("button");t.className="note-button",t.textContent=e.name,t.addEventListener("click",(()=>{this.checkAnswer(e)})),this.noteOptionsContainer.appendChild(t)}))}checkAnswer(e){if(!this.currentLevel)return;const t=this.currentLevel.getCurrentNote(),s=t.name===e.name;this.state.noteHistory[t.name]||(this.state.noteHistory[t.name]={correct:0,incorrect:0}),s?(this.state.noteHistory[t.name].correct+=1,this.showFeedback(!0,`Correct! That's ${t.name}`)):(this.state.noteHistory[t.name].incorrect+=1,this.showFeedback(!1,`Incorrect. That was ${t.name}, not ${e.name}`)),this.updateStats(),this.storageManager.saveState(this.state),setTimeout((()=>{this.moveToNextNote()}),1500)}moveToNextNote(){this.currentLevel&&(this.state.recentAttempts&&this.currentLevel.isComplete(this.state.recentAttempts)?this.levelUp():(this.currentLevel.nextNote(),this.displayCurrentNote()))}levelUp(){this.state.currentLevelIndex++,this.storageManager.saveState(this.state),this.state.currentLevelIndex<i.levels.length?(this.showFeedback(!0,`Level Up! Moving to level ${this.state.currentLevelIndex+1}`),setTimeout((()=>{this.loadLevel(this.state.currentLevelIndex)}),2e3)):(this.showFeedback(!0,"Congratulations! You've completed all levels!"),this.state.isGameRunning=!1)}showFeedback(e,t){this.feedbackElement.textContent=t,this.feedbackElement.className=e?"correct":"incorrect"}clearFeedback(){this.feedbackElement.textContent="",this.feedbackElement.className=""}calculateCurrentStreak(){if(!this.state.recentAttempts||0===this.state.recentAttempts.length)return 0;let e=0;for(let t=this.state.recentAttempts.length-1;t>=0&&this.state.recentAttempts[t].isCorrect;t--)e++;return e}calculateAverageSpeed(){if(!this.state.recentAttempts||0===this.state.recentAttempts.length)return 0;const e=i.levels[this.state.currentLevelIndex],t=e?.requiredSuccessCount||10,s=this.state.recentAttempts.slice(-t);return s.reduce(((e,t)=>e+t.timeSpent),0)/s.length}updateStats(){const e=this.calculateCurrentStreak();this.streakElement&&(this.streakElement.textContent=e.toString());const t=this.calculateAverageSpeed();this.speedElement&&(this.speedElement.textContent=t.toFixed(1)),this.updateVisualFeedback()}updateLevelRequirements(){if(!this.currentLevel)return;const e=i.levels[this.state.currentLevelIndex],t=e?.requiredSuccessCount||10,s=e?.maxTimePerProblem||5;this.streakRequiredElement&&(this.streakRequiredElement.textContent=t.toString()),this.speedRequiredElement&&(this.speedRequiredElement.textContent=s.toString())}updateVisualFeedback(){if(!this.streakElement||!this.speedElement)return;const e=this.calculateCurrentStreak(),t=this.calculateAverageSpeed(),s=i.levels[this.state.currentLevelIndex],n=s?.requiredSuccessCount||10,a=s?.maxTimePerProblem||5;this.streakElement.className=e>=n?"goal-met":e>=n/2?"progress":"",this.speedElement.className=t>0&&t<a?"goal-met":t>0&&t<1.5*a?"progress":""}clearNoteOptions(){this.noteOptionsContainer.innerHTML=""}}document.addEventListener("DOMContentLoaded",(()=>{const e=new r,t=document.getElementById("start-button"),s=document.getElementById("reset-button");t.addEventListener("click",(()=>{e.start()})),s.addEventListener("click",(()=>{e.reset()}))}))})();